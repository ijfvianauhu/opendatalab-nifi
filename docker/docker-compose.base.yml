version: "3.3"

services:

  traefik:
    image: "${TRAEFIK_IMAGE_NAME}:${TRAEFIK_ACTIVE_BRANCH}"
    hostname: "${TRAEFIK_NAME}"
    environment:
        - HTTP_PORT=${TRAEFIK_HTTP_PORT}
        - HTTPS_PORT=${TRAEFIK_HTTPS_PORT}
        - PROXY_NETWORKNAME=${COMPOSE_NETWORKNAME}
        - PROXY_NAME=${TRAEFIK_NAME}
        - LOG_LEVEL=${TRAEFIK_LOG_LEVEL}
        - ENABLE_DASHBOARD=${TRAEFIK_ENABLE_DASHBOARD}
        - PROXY_ADMIN_USER=${TRAEFIK_ADMIN_USER}
        - PROXY_ADMIN_PASSWORD=${TRAEFIK_ADMIN_PASSWORD}
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      - "--api.dashboard=${TRAEFIK_ENABLE_DASHBOARD}"
      - "--entryPoints.web.address=:${TRAEFIK_HTTP_PORT}"
      - "--entryPoints.websecure.address=:${TRAEFIK_HTTPS_PORT}"
      - "--entryPoints.websecure.transport.respondingTimeouts.readTimeout=3600"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.network=${COMPOSE_NETWORKNAME}"
      - "--providers.file.filename=/etc/traefik/dynamic_conf.yml"
      - "--providers.file.watch=true"
      - "--serversTransport.insecureSkipVerify=true"
    ports:
      - "${TRAEFIK_HTTP_PORT}:${TRAEFIK_HTTP_PORT}"
      - "${TRAEFIK_HTTPS_PORT}:${TRAEFIK_HTTPS_PORT}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "../etc/traefik:/etc/traefik"

  nifi:
    image: "${NIFI_IMAGE_NAME}:${NIFI_ACTIVE_BRANCH}"
    hostname: "${NIFI_NAME}"
    user: "${COMPOSE_USER}:${COMPOSE_GRP}"  
    expose:
      - ${NIFI_WEB_HTTP_PORT}:${NIFI_WEB_HTTP_PORT}
      - ${NIFI_WEB_HTTPS_PORT}:${NIFI_WEB_HTTPS_PORT}
    environment:
      - NIFI_WEB_HTTP_PORT=${NIFI_WEB_HTTP_PORT}
      - NIFI_WEB_HTTPS_PORT=${NIFI_WEB_HTTPS_PORT}
      - SINGLE_USER_CREDENTIALS_USERNAME=${NIFI_SINGLE_USER_CREDENTIALS_USERNAME}
      - SINGLE_USER_CREDENTIALS_PASSWORD=${NIFI_SINGLE_USER_CREDENTIALS_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nifi_http.rule=Host(`${NIFI_NAME}`)"
      - "traefik.http.routers.nifi_http.entrypoints=websecure"
      - "traefik.http.routers.nifi_http.service=nifi"
      - "traefik.http.routers.nifi_http.tls=true"
      - "traefik.http.services.nifi.loadbalancer.server.scheme=https"
      - "traefik.http.services.nifi.loadbalancer.server.port=${NIFI_WEB_HTTPS_PORT}"
      - "traefik.docker.network=${COMPOSE_NETWORKNAME}"
    volumes:
      - nifi-conf:/opt/nifi/nifi2-current/conf
      - nifi-content:/opt/nifi/nifi2-current/content_repository
      - nifi-db:/opt/nifi/nifi2-current/database_repository
      - nifi-flowfile:/opt/nifi/nifi2-current/flowfile_repository
      - nifi-provenance:/opt/nifi/nifi2-current/provenance_repository
      - nifi-logs:/opt/nifi/nifi2-current/logs
      - nifi-data:/opt/nifi/nifi2-current/data

  mariadb:
    image: ${MARIADB_IMAGE_NAME}:${MARIADB_ACTIVE_BRANCH}
    hostname: ${MARIADB_NAME}
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      # MARIADB_PORT=3306
    volumes:
      - mariadb_data:/var/lib/mysql

  phpmyadmin:
    image: "${PM_IMAGE_NAME}:${PM_ACTIVE_BRANCH}"
    hostname: "${PM_NAME}"
    restart: always
    environment:
      PMA_HOST: mariadb            # Nombre del servicio MariaDB (debe coincidir)
      UPLOAD_LIMIT: 1024M           # Tamaño máximo de subida de archivos
    expose:
      - "80"                  # phpMyAdmin estará disponible en http://localhost:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phpmyadmin_http.rule=Host(`${PM_NAME}`)"
      - "traefik.http.routers.phpmyadmin_http.entrypoints=websecure"
      - "traefik.http.routers.phpmyadmin_http.service=phpmyadmin"
      - "traefik.http.routers.phpmyadmin_http.tls=true"
      - "traefik.http.services.phpmyadmin.loadbalancer.server.scheme=http"
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=80"
      - "traefik.docker.network=${COMPOSE_NETWORKNAME}"

  mongodb:
    image: "${MONGO_IMAGE_NAME}:${MONGO_ACTIVE_BRANCH}"
    container_name: "${MONGO_NAME}"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"   # Usuario administrador para MongoDB
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}" # Contraseña del usuario administrador
    volumes:
      - mongodb_data:/data/db

  mongo-express:
    image: "${ME_IMAGE_NAME}:${ME_ACTIVE_BRANCH}"
    hostname: "${ME_NAME}"
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: "${MONGO_INITDB_ROOT_USERNAME}"     # Usuario administrador (mismo que MongoDB)
      ME_CONFIG_MONGODB_ADMINPASSWORD: example # Contraseña del administrador
      ME_CONFIG_MONGODB_SERVER: mongodb        # Nombre del servicio MongoDB (debe coincidir)
    expose:
      - "8081"                            # Mongo Express estará disponible en http://localhost:8081
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express_http.rule=Host(`${ME_NAME}`)"
      - "traefik.http.routers.mongo-express_http.entrypoints=websecure"
      - "traefik.http.routers.mongo-express_http.service=mongo-express"
      - "traefik.http.routers.mongo-express_http.tls=true"
      - "traefik.http.services.mongo-express.loadbalancer.server.scheme=http"
      - "traefik.http.services.mongo-express.loadbalancer.server.port=8081"
      - "traefik.docker.network=${COMPOSE_NETWORKNAME}"

networks:
    default:
        name: "${COMPOSE_NETWORKNAME}"
volumes:
  nifi-conf:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${NIFI_VOLUMES_DIR}/conf"

  nifi-content:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${NIFI_VOLUMES_DIR}/content"

  nifi-db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${NIFI_VOLUMES_DIR}/db"

  nifi-flowfile:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${NIFI_VOLUMES_DIR}/flowfile"

  nifi-provenance:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${NIFI_VOLUMES_DIR}/provenance"

  nifi-logs:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${NIFI_VOLUMES_DIR}/logs"

  nifi-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${NIFI_VOLUMES_DIR}/data"

  mariadb_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${MARIADB_VOLUMES_DIR}/mysqldata"

  mongodb_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${MONGO_VOLUMES_DIR}/mongodbdata"
